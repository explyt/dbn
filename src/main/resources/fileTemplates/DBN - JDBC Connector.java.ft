/*
 * Copyright 2024 Oracle and/or its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end
#if(${DATABASE_TYPE} == 'GENERIC')
    #set($databaseType = "Custom")
#else
    #set($databaseType = "${DATABASE_TYPE}")
#end

import java.sql.Connection;
import java.sql.Driver;
import java.util.Properties;

#parse("DBN - JDBC Doc ${DATABASE_TYPE}.java")
public class ${CLASS_NAME}  {
    #parse("DBN - JDBC Constants.java")

    /**
     * Creates a jdbc connection to the ${DATABASE_TYPE} database
     * @return a new {@link Connection}
     * @throws Exception if something goes wrong
     */
    #if (${AUTH_TYPE} == 'USER_PASSWORD')
    public Connection connect(String password) throws Exception {
    #else
    public Connection connect() throws Exception {
    #end
        Properties properties = new Properties();

        // JDBC URL
        // $databaseType jdbc url: ${JDBC_URL_PATTERN}
        #parse("DBN - JDBC URL.java")

        // AUTHENTICATION
        #parse("DBN - JDBC Authentication.java")

        // PROPERTIES
        #parse("DBN - JDBC Properties.java")

        // DRIVER
        // $databaseType driver class "${JDBC_DRIVER}"
        Class<? extends Driver> driverClass =#if (${JDBC_DRIVER}) ${JDBC_DRIVER}.class; #else null; // TODO specify driver class#end
        Driver driver = driverClass.getConstructor().newInstance();

        // CONNECTION
        return driver.connect(jdbcUrl, properties);
    }

	/**
	* #if (${PASSWORD_SOURCE} == 'ENVIRONMENT_VARIABLE')
     * Set the environment variable JDBC_DB_PASSWORD to the password for ${USER_NAME} if you are using
     * password authentication.
     *#end
     */
    public static void main(String[] args) {
        ${CLASS_NAME} connector = new ${CLASS_NAME}();
  
        #if (${AUTH_TYPE} == 'USER_PASSWORD')
        String password = System.getenv("JDBC_DB_PASSWORD");
        
        // if no environment var set, prompt from user
        if (password == null) {
            // IntelliJ might not create a console tty for your
            if (System.console() != null) {
                password = new String(System.console().readPassword("Enter your password: "));
            }
            else {
                throw new UnsupportedOperationException("You need to supply a password");
            }
        }

        try (Connection connection = connector.connect(password)) {
		#else 
        try (Connection connection = connector.connect()) {
		#end
            connection.isValid(10);
            System.out.println("INFO: Successfully connected and validated");

        } catch (Exception e) {
            System.out.println("ERROR: Failed to connect. Cause:  " + e.getMessage());
        }
    }
}