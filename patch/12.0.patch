Index: src/com/dci/intellij/dbn/common/ui/ValueSelector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/common/ui/ValueSelector.java	(revision 765)
+++ src/com/dci/intellij/dbn/common/ui/ValueSelector.java	(revision )
@@ -21,6 +21,7 @@
 import javax.swing.JLabel;
 import javax.swing.JPanel;
 import javax.swing.SwingConstants;
+import javax.swing.UIManager;
 import javax.swing.border.Border;
 import javax.swing.border.CompoundBorder;
 import javax.swing.border.EmptyBorder;
@@ -362,7 +363,7 @@
             final GraphicsConfig config = new GraphicsConfig(g);
             g.translate(x, y);
 
-            if (UIUtil.isUnderDarcula() || UIUtil.isUnderIntelliJLaF()) {
+            if (UIUtil.isUnderDarcula() || UIManager.getLookAndFeel().getName().contains("IntelliJ")) {
                 if (valueSelector.isActive) {
                     DarculaUIUtil.paintFocusRing(g, 2, 2, width - 4, height - 4);
                 } else {
Index: src/com/dci/intellij/dbn/debugger/DatabaseDebuggerManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/debugger/DatabaseDebuggerManager.java	(revision 765)
+++ src/com/dci/intellij/dbn/debugger/DatabaseDebuggerManager.java	(revision )
@@ -120,8 +120,8 @@
         runManager.setSelectedConfiguration(runConfigurationSetting);
         ProgramRunner programRunner = RunnerRegistry.getInstance().findRunnerById(DBProgramRunner.RUNNER_ID);
         try {
-            ExecutionEnvironment executionEnvironment = new ExecutionEnvironment(DefaultDebugExecutor.getDebugExecutorInstance(), programRunner, runConfigurationSetting, getProject());
-            programRunner.execute(executionEnvironment);
+            ExecutionEnvironment executionEnvironment = new ExecutionEnvironment(programRunner, runConfigurationSetting, getProject());
+            programRunner.execute(DefaultDebugExecutor.getDebugExecutorInstance(), executionEnvironment);
         } catch (ExecutionException e) {
             MessageUtil.showErrorDialog(
                     "Could not start debugger for " + method.getQualifiedName() + ". \n" +
\ No newline at end of file
Index: build/build.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- build/build.properties	(revision 765)
+++ build/build.properties	(revision )
@@ -1,4 +1,4 @@
-idea.home= C:/Program Files (x86)/JetBrains/IntelliJ IDEA 13
-idea.version = 13.0
+idea.home= C:/Program Files (x86)/JetBrains/IntelliJ IDEA 12
+idea.version = 12.0
 package.name = DBN-${idea.version}.zip
 idea.plugins.sandbox=
\ No newline at end of file
Index: src/com/dci/intellij/dbn/debugger/execution/DBProgramRunner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/debugger/execution/DBProgramRunner.java	(revision 765)
+++ src/com/dci/intellij/dbn/debugger/execution/DBProgramRunner.java	(revision )
@@ -31,7 +31,6 @@
 import com.intellij.xdebugger.XDebugSession;
 import com.intellij.xdebugger.XDebuggerManager;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 import java.util.List;
 
@@ -51,11 +50,7 @@
         return false;
     }
 
-    @Nullable
-    protected RunContentDescriptor doExecute(Project project, RunProfileState state, RunContentDescriptor contentToReuse, ExecutionEnvironment env) throws ExecutionException {
-        return doExecute(project, env.getExecutor(), state, contentToReuse, env);
-    }
-
+    @Override
     protected RunContentDescriptor doExecute(
             Project project,
             final Executor executor,
@@ -266,6 +261,5 @@
             }
         }.start();
     }
-
 }
 
Index: src/com/dci/intellij/dbn/DatabaseNavigator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/DatabaseNavigator.java	(revision 765)
+++ src/com/dci/intellij/dbn/DatabaseNavigator.java	(revision )
@@ -14,6 +14,7 @@
 import com.intellij.notification.NotificationGroup;
 import com.intellij.openapi.application.ApplicationManager;
 import com.intellij.openapi.components.ApplicationComponent;
+import com.intellij.openapi.progress.ProgressIndicator;
 import com.intellij.openapi.ui.Messages;
 import com.intellij.openapi.util.InvalidDataException;
 import com.intellij.openapi.util.JDOMExternalizable;
@@ -23,6 +24,7 @@
 
 import javax.swing.Icon;
 import java.io.IOException;
+import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Timer;
 import java.util.TimerTask;
@@ -159,15 +161,28 @@
 
     private class PluginUpdateChecker extends TimerTask {
         public void run() {
+            List<IdeaPluginDescriptor> descriptors = null;
             try {
-                List<IdeaPluginDescriptor> descriptors = RepositoryHelper.loadPluginsFromRepository(null);
+                Method process = RepositoryHelper.class.getMethod("process", ProgressIndicator.class);
+                descriptors = (List<IdeaPluginDescriptor>) process.invoke(null, (ProgressIndicator) null);
+                //List<IdeaPluginDescriptor> descriptors = RepositoryHelper.process(null);
+            } catch (Exception e1) {
+                try {
+                    Method process = RepositoryHelper.class.getMethod("loadPluginsFromRepository", ProgressIndicator.class);
+                    descriptors = (List<IdeaPluginDescriptor>) process.invoke(null, (ProgressIndicator) null);
+                } catch (Exception e2) {
+                    e2.printStackTrace();
+                }
+
+            }
+            if (descriptors != null) {
                 for (IdeaPluginDescriptor descriptor : descriptors) {
                     if (descriptor.getPluginId().toString().equals(DatabaseNavigator.DBN_PLUGIN_ID)) {
                         repositoryPluginVersion = descriptor.getVersion();
                         break;
                     }
                 }
-            } catch (Exception e) {
+
             }
         }
     }
Index: src/com/dci/intellij/dbn/language/psql/structure/PSQLStructureViewBuilderFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/language/psql/structure/PSQLStructureViewBuilderFactory.java	(revision 765)
+++ src/com/dci/intellij/dbn/language/psql/structure/PSQLStructureViewBuilderFactory.java	(revision )
@@ -8,7 +8,6 @@
 import com.intellij.lang.PsiStructureViewFactory;
 import com.intellij.openapi.editor.Editor;
 import com.intellij.psi.PsiFile;
-import com.intellij.psi.util.PsiEditorUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -22,14 +21,13 @@
             }
 
             @NotNull
-            @Override
             public StructureViewModel createStructureViewModel(@Nullable Editor editor) {
                 PsiFile psiFile = DocumentUtil.getFile(editor);
                 return psiFile == null || isDisposed() ? EmptyStructureViewModel.INSTANCE : new PSQLStructureViewModel(psiFile);
             }
 
             private boolean isDisposed() {
-                return PsiEditorUtil.Service.getInstance() == null;
+                return false;
             }
         };
     }
\ No newline at end of file
Index: src/com/dci/intellij/dbn/debugger/execution/DBProgramRunConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/debugger/execution/DBProgramRunConfiguration.java	(revision 765)
+++ src/com/dci/intellij/dbn/debugger/execution/DBProgramRunConfiguration.java	(revision )
@@ -11,6 +11,7 @@
 import com.intellij.execution.ExecutionException;
 import com.intellij.execution.Executor;
 import com.intellij.execution.configurations.ConfigurationFactory;
+import com.intellij.execution.configurations.ConfigurationInfoProvider;
 import com.intellij.execution.configurations.LocatableConfiguration;
 import com.intellij.execution.configurations.RunConfiguration;
 import com.intellij.execution.configurations.RunConfigurationBase;
@@ -18,12 +19,16 @@
 import com.intellij.execution.configurations.RuntimeConfigurationError;
 import com.intellij.execution.configurations.RuntimeConfigurationException;
 import com.intellij.execution.runners.ExecutionEnvironment;
+import com.intellij.execution.runners.ProgramRunner;
+import com.intellij.openapi.options.SettingsEditor;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.util.InvalidDataException;
+import com.intellij.openapi.util.JDOMExternalizable;
 import com.intellij.openapi.util.WriteExternalException;
 import gnu.trove.THashSet;
 import org.jdom.Element;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -39,11 +44,22 @@
         super(project, factory, name);
     }
 
-    @NotNull
     public DBProgramRunConfigurationEditor getConfigurationEditor() {
         if (configurationEditor == null )
             configurationEditor = new DBProgramRunConfigurationEditor(this);
         return configurationEditor;
+    }
+
+    @Nullable
+    @Override
+    public JDOMExternalizable createRunnerSettings(ConfigurationInfoProvider configurationInfoProvider) {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public SettingsEditor<JDOMExternalizable> getRunnerSettingsEditor(ProgramRunner programRunner) {
+        return null;
     }
 
     public boolean isCompileDependencies() {
Index: src/com/dci/intellij/dbn/language/sql/structure/SQLStructureViewBuilderFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/language/sql/structure/SQLStructureViewBuilderFactory.java	(revision 765)
+++ src/com/dci/intellij/dbn/language/sql/structure/SQLStructureViewBuilderFactory.java	(revision )
@@ -8,7 +8,6 @@
 import com.intellij.lang.PsiStructureViewFactory;
 import com.intellij.openapi.editor.Editor;
 import com.intellij.psi.PsiFile;
-import com.intellij.psi.util.PsiEditorUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -22,14 +21,13 @@
             }
 
             @NotNull
-            @Override
             public StructureViewModel createStructureViewModel(@Nullable Editor editor) {
                 PsiFile psiFile = DocumentUtil.getFile(editor);
                 return psiFile == null || isDisposed() ? EmptyStructureViewModel.INSTANCE : new SQLStructureViewModel(psiFile);
             }
 
             private boolean isDisposed() {
-                return PsiEditorUtil.Service.getInstance() == null;
+                return false;
             }
         };
     }
Index: src/META-INF/plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/META-INF/plugin.xml	(revision 765)
+++ src/META-INF/plugin.xml	(revision )
@@ -6,7 +6,7 @@
     <category>Database</category>
     <depends>com.intellij.modules.lang</depends>
     <vendor email="dancioca@bluewin.ch" logo="/img/v1/project/DatabaseNavigator.png">Dan Cioca</vendor>
-    <idea-version since-build="130.0001" until-build="135.9999"/>
+    <idea-version since-build="123.0001" until-build="129.9999"/>
     <description><![CDATA[
             <b>Database development, scripting and navigation tool</b><br>
             This product aims to add extensive database development and maintenance capabilities to the IntelliJ
