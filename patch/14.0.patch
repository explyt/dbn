Index: src/com/dci/intellij/dbn/vfs/SourceCodeFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/vfs/SourceCodeFile.java	(revision 765)
+++ src/com/dci/intellij/dbn/vfs/SourceCodeFile.java	(revision )
@@ -224,8 +224,8 @@
 
     @Override
     public <T> void putUserData(@NotNull Key<T> key, T value) {
-        if (key == FileDocumentManagerImpl.DOCUMENT_KEY && contentType.isOneOf(DBContentType.CODE, DBContentType.CODE_BODY) ) {
-            databaseFile.putUserData(FileDocumentManagerImpl.DOCUMENT_KEY, (Reference<Document>) value);
+        if (key == FileDocumentManagerImpl.HARD_REF_TO_DOCUMENT_KEY && contentType.isOneOf(DBContentType.CODE, DBContentType.CODE_BODY) ) {
+            databaseFile.putUserData(FileDocumentManagerImpl.HARD_REF_TO_DOCUMENT_KEY, (Document) value);
         }
         super.putUserData(key, value);
     }
Index: src/com/dci/intellij/dbn/vfs/DatabaseEditableObjectFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/vfs/DatabaseEditableObjectFile.java	(revision 765)
+++ src/com/dci/intellij/dbn/vfs/DatabaseEditableObjectFile.java	(revision )
@@ -203,17 +203,17 @@
 
     @Override
     public <T> T getUserData(@NotNull Key<T> key) {
-        if (key == FileDocumentManagerImpl.DOCUMENT_KEY) {
+        if (key == FileDocumentManagerImpl.HARD_REF_TO_DOCUMENT_KEY) {
             DBContentType mainContentType = getMainContentType();
             boolean isCode = mainContentType == DBContentType.CODE || mainContentType == DBContentType.CODE_BODY;
             if (isCode) {
                 if (FAKE_DOCUMENT.get() != null) {
-                    return (T) new WeakReference<Document>(FAKE_DOCUMENT.get());
+                    return (T) FAKE_DOCUMENT.get();
                 }
 
                 DatabaseContentFile mainContentFile = getMainContentFile();
                 Document document = DocumentUtil.getDocument(mainContentFile);
-                return (T) new WeakReference<Document>(document);
+                return (T) document;
             }
         }
         return super.getUserData(key);
Index: build/build.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- build/build.properties	(revision 765)
+++ build/build.properties	(revision )
@@ -1,4 +1,4 @@
-idea.home= C:/Program Files (x86)/JetBrains/IntelliJ IDEA 13
-idea.version = 13.0
+idea.home= C:/Program Files (x86)/JetBrains/IntelliJ IDEA 14
+idea.version = 14.0
 package.name = DBN-${idea.version}.zip
 idea.plugins.sandbox=
\ No newline at end of file
Index: src/META-INF/plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/META-INF/plugin.xml	(revision 765)
+++ src/META-INF/plugin.xml	(revision )
@@ -6,7 +6,7 @@
     <category>Database</category>
     <depends>com.intellij.modules.lang</depends>
     <vendor email="dancioca@bluewin.ch" logo="/img/v1/project/DatabaseNavigator.png">Dan Cioca</vendor>
-    <idea-version since-build="130.0001" until-build="135.9999"/>
+    <idea-version since-build="138.0001" until-build="138.9999"/>
     <description><![CDATA[
             <b>Database development, scripting and navigation tool</b><br>
             This product aims to add extensive database development and maintenance capabilities to the IntelliJ
Index: src/com/dci/intellij/dbn/module/DBModuleWizardStep.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/module/DBModuleWizardStep.java	(revision 765)
+++ src/com/dci/intellij/dbn/module/DBModuleWizardStep.java	(revision )
@@ -4,11 +4,13 @@
 import com.intellij.ide.util.projectWizard.WizardContext;
 import com.intellij.ide.util.projectWizard.ModuleBuilder;
 import com.intellij.openapi.roots.ui.configuration.ModulesProvider;
+import com.intellij.openapi.util.IconLoader;
 
 import javax.swing.Icon;
 
 
 public abstract class DBModuleWizardStep extends ModuleWizardStep {
+    protected static final Icon ICON = IconLoader.getIcon("/addmodulewizard.png");
     public DBModuleWizardStep(WizardContext wizardContext, ModuleBuilder moduleBuilder, ModulesProvider modulesProvider) {
         this.wizardContext = wizardContext;
         this.moduleBuilder = moduleBuilder;
