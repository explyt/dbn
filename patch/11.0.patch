Index: src/com/dci/intellij/dbn/editor/code/SourceCodeLoadErrorNotificationProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/editor/code/SourceCodeLoadErrorNotificationProvider.java	(revision 765)
+++ src/com/dci/intellij/dbn/editor/code/SourceCodeLoadErrorNotificationProvider.java	(revision )
@@ -1,14 +1,15 @@
 package com.dci.intellij.dbn.editor.code;
 
+import com.dci.intellij.dbn.common.editor.BasicTextEditor;
 import com.dci.intellij.dbn.common.event.EventManager;
 import com.dci.intellij.dbn.common.thread.ConditionalLaterInvocator;
+import com.dci.intellij.dbn.common.util.EditorUtil;
 import com.dci.intellij.dbn.common.util.StringUtil;
 import com.dci.intellij.dbn.editor.code.ui.SourceCodeLoadErrorNotificationPanel;
 import com.dci.intellij.dbn.object.common.DBSchemaObject;
 import com.dci.intellij.dbn.vfs.DatabaseEditableObjectFile;
 import com.dci.intellij.dbn.vfs.SourceCodeFile;
 import com.intellij.ide.FrameStateManager;
-import com.intellij.openapi.fileEditor.FileEditor;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.util.Key;
 import com.intellij.openapi.vfs.VirtualFile;
@@ -16,7 +17,7 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-public class SourceCodeLoadErrorNotificationProvider extends EditorNotifications.Provider<SourceCodeLoadErrorNotificationPanel> {
+public class SourceCodeLoadErrorNotificationProvider implements EditorNotifications.Provider<SourceCodeLoadErrorNotificationPanel> {
     private static final Key<SourceCodeLoadErrorNotificationPanel> KEY = Key.create("DBNavigator.SourceCodeLoadErrorNotificationPanel");
     private Project project;
 
@@ -49,10 +50,11 @@
 
     @Nullable
     @Override
-    public SourceCodeLoadErrorNotificationPanel createNotificationPanel(VirtualFile virtualFile, FileEditor fileEditor) {
+    public SourceCodeLoadErrorNotificationPanel createNotificationPanel(VirtualFile virtualFile) {
         if (virtualFile instanceof DatabaseEditableObjectFile) {
-            if (fileEditor instanceof SourceCodeEditor) {
-                DatabaseEditableObjectFile editableObjectFile = (DatabaseEditableObjectFile) virtualFile;
+            DatabaseEditableObjectFile editableObjectFile = (DatabaseEditableObjectFile) virtualFile;
+            BasicTextEditor fileEditor = EditorUtil.getFileEditor(editableObjectFile, editableObjectFile.getMainContentFile());
+            if (fileEditor instanceof SourceCodeEditor) {
                 DBSchemaObject editableObject = editableObjectFile.getObject();
                 SourceCodeEditor sourceCodeEditor = (SourceCodeEditor) fileEditor;
                 SourceCodeFile sourceCodeFile = sourceCodeEditor.getVirtualFile();
Index: src/com/dci/intellij/dbn/ddl/DDLMappedNotificationProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/ddl/DDLMappedNotificationProvider.java	(revision 765)
+++ src/com/dci/intellij/dbn/ddl/DDLMappedNotificationProvider.java	(revision )
@@ -2,14 +2,12 @@
 
 import com.dci.intellij.dbn.common.event.EventManager;
 import com.dci.intellij.dbn.ddl.ui.DDLMappedNotificationPanel;
-import com.dci.intellij.dbn.editor.ddl.DDLFileEditor;
 import com.dci.intellij.dbn.language.common.DBLanguageFileType;
 import com.dci.intellij.dbn.object.common.DBSchemaObject;
 import com.dci.intellij.dbn.object.lookup.DBObjectRef;
 import com.dci.intellij.dbn.vfs.DatabaseEditableObjectFile;
 import com.dci.intellij.dbn.vfs.DatabaseFileSystem;
 import com.intellij.ide.FrameStateManager;
-import com.intellij.openapi.fileEditor.FileEditor;
 import com.intellij.openapi.fileEditor.FileEditorManager;
 import com.intellij.openapi.fileEditor.FileEditorManagerAdapter;
 import com.intellij.openapi.fileEditor.FileEditorManagerListener;
@@ -22,7 +20,7 @@
 
 import java.util.List;
 
-public class DDLMappedNotificationProvider extends EditorNotifications.Provider<DDLMappedNotificationPanel> {
+public class DDLMappedNotificationProvider implements EditorNotifications.Provider<DDLMappedNotificationPanel> {
     private static final Key<DDLMappedNotificationPanel> KEY = Key.create("DBNavigator.DDLMappedNotificationPanel");
     private Project project;
 
@@ -87,9 +85,9 @@
     }
 
     @Nullable
-    @Override
-    public DDLMappedNotificationPanel createNotificationPanel(VirtualFile virtualFile, FileEditor fileEditor) {
+    public DDLMappedNotificationPanel createNotificationPanel(VirtualFile virtualFile) {
         if (virtualFile instanceof DatabaseEditableObjectFile) {
+/*
             if (fileEditor instanceof DDLFileEditor) {
                 DatabaseEditableObjectFile editableObjectFile = (DatabaseEditableObjectFile) virtualFile;
                 DBSchemaObject editableObject = editableObjectFile.getObject();
@@ -98,6 +96,7 @@
                 return createPanel(ddlVirtualFile, editableObject);
             }
             return null;
+*/
         } else {
             if (virtualFile.getFileType() instanceof DBLanguageFileType) {
                 DDLFileAttachmentManager attachmentManager = DDLFileAttachmentManager.getInstance(project);
Index: src/com/dci/intellij/dbn/DatabaseNavigator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/DatabaseNavigator.java	(revision 765)
+++ src/com/dci/intellij/dbn/DatabaseNavigator.java	(revision )
@@ -160,7 +160,7 @@
     private class PluginUpdateChecker extends TimerTask {
         public void run() {
             try {
-                List<IdeaPluginDescriptor> descriptors = RepositoryHelper.loadPluginsFromRepository(null);
+                List<IdeaPluginDescriptor> descriptors = RepositoryHelper.process(null);
                 for (IdeaPluginDescriptor descriptor : descriptors) {
                     if (descriptor.getPluginId().toString().equals(DatabaseNavigator.DBN_PLUGIN_ID)) {
                         repositoryPluginVersion = descriptor.getVersion();
Index: src/com/dci/intellij/dbn/language/psql/structure/PSQLStructureViewBuilderFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/language/psql/structure/PSQLStructureViewBuilderFactory.java	(revision 765)
+++ src/com/dci/intellij/dbn/language/psql/structure/PSQLStructureViewBuilderFactory.java	(revision )
@@ -8,7 +8,6 @@
 import com.intellij.lang.PsiStructureViewFactory;
 import com.intellij.openapi.editor.Editor;
 import com.intellij.psi.PsiFile;
-import com.intellij.psi.util.PsiEditorUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -22,14 +21,13 @@
             }
 
             @NotNull
-            @Override
             public StructureViewModel createStructureViewModel(@Nullable Editor editor) {
                 PsiFile psiFile = DocumentUtil.getFile(editor);
                 return psiFile == null || isDisposed() ? EmptyStructureViewModel.INSTANCE : new PSQLStructureViewModel(psiFile);
             }
 
             private boolean isDisposed() {
-                return PsiEditorUtil.Service.getInstance() == null;
+                return false;
             }
         };
     }
\ No newline at end of file
Index: src/com/dci/intellij/dbn/code/sql/color/SQLTextAttributesKeys.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/code/sql/color/SQLTextAttributesKeys.java	(revision 765)
+++ src/com/dci/intellij/dbn/code/sql/color/SQLTextAttributesKeys.java	(revision )
@@ -1,29 +1,31 @@
 package com.dci.intellij.dbn.code.sql.color;
 
-import com.intellij.codeInsight.template.impl.TemplateColors;
-import com.intellij.openapi.editor.DefaultLanguageHighlighterColors;
 import com.intellij.openapi.editor.HighlighterColors;
+import com.intellij.openapi.editor.SyntaxHighlighterColors;
 import com.intellij.openapi.editor.colors.CodeInsightColors;
 import com.intellij.openapi.editor.colors.TextAttributesKey;
 import com.intellij.openapi.editor.markup.TextAttributes;
+import com.intellij.ui.SimpleTextAttributes;
 
+import java.awt.Color;
+
 public interface SQLTextAttributesKeys {
-    TextAttributesKey LINE_COMMENT       = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.LineComment",       DefaultLanguageHighlighterColors.LINE_COMMENT);
-    TextAttributesKey BLOCK_COMMENT      = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.BlockComment",      DefaultLanguageHighlighterColors.BLOCK_COMMENT);
-    TextAttributesKey STRING             = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.String",            DefaultLanguageHighlighterColors.STRING);
-    TextAttributesKey NUMBER             = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Number",            DefaultLanguageHighlighterColors.NUMBER);
-    TextAttributesKey DATA_TYPE          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.DataType",          DefaultLanguageHighlighterColors.CONSTANT);
-    TextAttributesKey ALIAS              = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Alias",             DefaultLanguageHighlighterColors.IDENTIFIER);
-    TextAttributesKey IDENTIFIER         = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Identifier",        DefaultLanguageHighlighterColors.IDENTIFIER);
-    TextAttributesKey QUOTED_IDENTIFIER  = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.QuotedIdentifier",  DefaultLanguageHighlighterColors.IDENTIFIER);
-    TextAttributesKey KEYWORD            = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Keyword",           DefaultLanguageHighlighterColors.KEYWORD);
-    TextAttributesKey FUNCTION           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Function",          DefaultLanguageHighlighterColors.PREDEFINED_SYMBOL);
-    TextAttributesKey PARAMETER          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Parameter",         TemplateColors.TEMPLATE_VARIABLE_ATTRIBUTES);
-    TextAttributesKey OPERATOR           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Operator",          DefaultLanguageHighlighterColors.OPERATION_SIGN);
-    TextAttributesKey PARENTHESIS        = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Parenthesis",       DefaultLanguageHighlighterColors.PARENTHESES);
-    TextAttributesKey BRACKET            = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Brackets",          DefaultLanguageHighlighterColors.BRACKETS);
-    TextAttributesKey UNKNOWN_IDENTIFIER = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.UnknownIdentifier", CodeInsightColors.WRONG_REFERENCES_ATTRIBUTES);
+    TextAttributesKey LINE_COMMENT       = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.LineComment",       SyntaxHighlighterColors.LINE_COMMENT.getDefaultAttributes());
+    TextAttributesKey BLOCK_COMMENT      = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.BlockComment",      SyntaxHighlighterColors.DOC_COMMENT.getDefaultAttributes());
+    TextAttributesKey STRING             = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.String",            SyntaxHighlighterColors.STRING.getDefaultAttributes());
+    TextAttributesKey NUMBER             = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Number",            SyntaxHighlighterColors.NUMBER.getDefaultAttributes());
+    TextAttributesKey DATA_TYPE          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.DataType",          SyntaxHighlighterColors.KEYWORD.getDefaultAttributes());
+    TextAttributesKey ALIAS              = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Alias",             HighlighterColors.TEXT.getDefaultAttributes());
+    TextAttributesKey IDENTIFIER         = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Identifier",        HighlighterColors.TEXT.getDefaultAttributes());
+    TextAttributesKey QUOTED_IDENTIFIER  = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.QuotedIdentifier",  HighlighterColors.TEXT.getDefaultAttributes());
+    TextAttributesKey KEYWORD            = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Keyword",           SyntaxHighlighterColors.KEYWORD.getDefaultAttributes());
+    TextAttributesKey FUNCTION           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Function",          SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES.toTextAttributes());
+    TextAttributesKey PARAMETER          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Parameter",         SyntaxHighlighterColors.KEYWORD.getDefaultAttributes());
+    TextAttributesKey OPERATOR           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Operator",          SyntaxHighlighterColors.OPERATION_SIGN.getDefaultAttributes());
+    TextAttributesKey PARENTHESIS        = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Parenthesis",       SyntaxHighlighterColors.PARENTHS.getDefaultAttributes());
+    TextAttributesKey BRACKET            = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Brackets",          SyntaxHighlighterColors.BRACKETS.getDefaultAttributes());
+    TextAttributesKey UNKNOWN_IDENTIFIER = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.UnknownIdentifier", new TextAttributes(Color.RED, null, null, null, 0));
     TextAttributesKey CHAMELEON          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Chameleon",         new TextAttributes(null, null, null, null, 0));
-    TextAttributesKey VARIABLE           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Variable",          TemplateColors.TEMPLATE_VARIABLE_ATTRIBUTES);
+    TextAttributesKey VARIABLE           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.SQL.Variable",          CodeInsightColors.INSTANCE_FIELD_ATTRIBUTES.getDefaultAttributes());
     TextAttributesKey BAD_CHARACTER      = HighlighterColors.BAD_CHARACTER;
 }
\ No newline at end of file
Index: src/com/dci/intellij/dbn/editor/data/ui/DatasetLoadErrorNotificationPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/editor/data/ui/DatasetLoadErrorNotificationPanel.java	(revision 765)
+++ src/com/dci/intellij/dbn/editor/data/ui/DatasetLoadErrorNotificationPanel.java	(revision )
@@ -1,7 +1,6 @@
 package com.dci.intellij.dbn.editor.data.ui;
 
-import com.intellij.codeInsight.hint.HintUtil;
-import com.intellij.icons.AllIcons;
+import com.intellij.util.PlatformIcons;
 import org.jetbrains.annotations.NotNull;
 
 import javax.swing.BorderFactory;
@@ -13,6 +12,7 @@
 import java.awt.Dimension;
 
 public class DatasetLoadErrorNotificationPanel extends JPanel{
+    private static final Color ERROR_COLOR = new Color(255, 220, 220);
     protected final JLabel label = new JLabel();
 
     public DatasetLoadErrorNotificationPanel() {
@@ -22,7 +22,7 @@
         setPreferredSize(new Dimension(-1, 24));
 
         add(label, BorderLayout.CENTER);
-        label.setIcon(AllIcons.General.Error);
+        label.setIcon(PlatformIcons.ERROR_INTRODUCTION_ICON);
     }
 
     public void setText(String text) {
@@ -41,7 +41,7 @@
 
     @Override
     public Color getBackground() {
-        return HintUtil.ERROR_COLOR;
+        return ERROR_COLOR;
     }
 
     @Override
Index: src/META-INF/plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/META-INF/plugin.xml	(revision 765)
+++ src/META-INF/plugin.xml	(revision )
@@ -6,7 +6,7 @@
     <category>Database</category>
     <depends>com.intellij.modules.lang</depends>
     <vendor email="dancioca@bluewin.ch" logo="/img/v1/project/DatabaseNavigator.png">Dan Cioca</vendor>
-    <idea-version since-build="130.0001" until-build="135.9999"/>
+    <idea-version since-build="111.0001" until-build="122.9999"/>
     <description><![CDATA[
             <b>Database development, scripting and navigation tool</b><br>
             This product aims to add extensive database development and maintenance capabilities to the IntelliJ
Index: src/com/dci/intellij/dbn/common/ui/ValueSelector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/common/ui/ValueSelector.java	(revision 765)
+++ src/com/dci/intellij/dbn/common/ui/ValueSelector.java	(revision )
@@ -3,16 +3,13 @@
 import com.dci.intellij.dbn.common.Icons;
 import com.dci.intellij.dbn.common.util.NamingUtil;
 import com.intellij.ide.DataManager;
-import com.intellij.ide.ui.laf.darcula.DarculaUIUtil;
 import com.intellij.openapi.actionSystem.AnAction;
 import com.intellij.openapi.actionSystem.AnActionEvent;
 import com.intellij.openapi.actionSystem.DefaultActionGroup;
-import com.intellij.openapi.ui.GraphicsConfig;
 import com.intellij.openapi.ui.popup.JBPopupFactory;
 import com.intellij.openapi.ui.popup.ListPopup;
 import com.intellij.openapi.util.Condition;
 import com.intellij.ui.Gray;
-import com.intellij.ui.JBColor;
 import com.intellij.ui.RoundedLineBorder;
 import com.intellij.util.IconUtil;
 import com.intellij.util.ui.UIUtil;
@@ -86,7 +83,7 @@
             insideBorderFocused = new EmptyBorder(2, 4, 2, 4);
 
             defaultBorder = insideBorder;
-            focusBorder = new CompoundBorder(new RoundedLineBorder(new JBColor(Gray._190, Gray._55), 3), insideBorderFocused);
+            focusBorder = new CompoundBorder(new RoundedLineBorder(Gray._190, 3), insideBorderFocused);
         }
 
         label = new JLabel(text, cropIcon(icon), SwingConstants.LEFT);
@@ -193,7 +190,7 @@
         public void mouseEntered(MouseEvent e) {
             if (!isShowingPopup && !isComboBox) {
                 innerPanel.setBorder(focusBorder);
-                innerPanel.setBackground(new JBColor(Gray._210, Gray._75));
+                innerPanel.setBackground(Gray._210);
                 updateUI();
             }
         }
@@ -359,41 +356,21 @@
         @Override
         public void paintBorder(Component c, Graphics g2, int x, int y, int width, int height) {
             Graphics2D g = ((Graphics2D)g2);
-            final GraphicsConfig config = new GraphicsConfig(g);
             g.translate(x, y);
 
-            if (UIUtil.isUnderDarcula() || UIUtil.isUnderIntelliJLaF()) {
-                if (valueSelector.isActive) {
-                    DarculaUIUtil.paintFocusRing(g, 2, 2, width - 4, height - 4);
-                } else {
-                    boolean editable = valueSelector.isEnabled;
-                    g.setColor(getBorderColor(c.isEnabled() && editable));
-                    g.drawRect(1, 1, width-2, height-2);
-                    g.setColor(UIUtil.getPanelBackground());
-                    g.drawRect(0, 0, width, height);
-
-                }
-            } else {
-                Border textFieldBorder = UIUtil.getTextFieldBorder();
-                if (textFieldBorder instanceof LineBorder) {
-                    LineBorder lineBorder = (LineBorder) textFieldBorder;
-                    g.setColor(lineBorder.getLineColor());
-                } else {
-                    g.setColor(UIUtil.getBorderColor());
-                }
-                g.drawRect(1, 1, width - 3, height - 3);
-                g.setColor(UIUtil.getPanelBackground());
-                g.drawRect(0, 0, width-1, height-1);
-            }
+            Border textFieldBorder = UIUtil.getTextFieldBorder();
+            if (textFieldBorder instanceof LineBorder) {
+                LineBorder lineBorder = (LineBorder) textFieldBorder;
+                g.setColor(lineBorder.getLineColor());
+            } else {
+                g.setColor(UIUtil.getBorderColor());
+            }
+            g.drawRect(1, 1, width - 3, height - 3);
+            g.setColor(UIUtil.getPanelBackground());
+            g.drawRect(0, 0, width-1, height-1);
+        }
-            g.translate(-x, -y);
-            config.restore();
 
-        }
-
         private Color getBorderColor(boolean enabled) {
-            if (UIUtil.isUnderDarcula()) {
-                return enabled ? Gray._100 : Gray._83;
-            }
             // disabled color is the same as ComboBox's border has
             return enabled ? Gray._100 : Gray._150;
         }
Index: src/com/dci/intellij/dbn/code/psql/color/PSQLTextAttributesKeys.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/code/psql/color/PSQLTextAttributesKeys.java	(revision 765)
+++ src/com/dci/intellij/dbn/code/psql/color/PSQLTextAttributesKeys.java	(revision )
@@ -1,27 +1,29 @@
 package com.dci.intellij.dbn.code.psql.color;
 
-import com.intellij.codeInsight.template.impl.TemplateColors;
-import com.intellij.openapi.editor.DefaultLanguageHighlighterColors;
 import com.intellij.openapi.editor.HighlighterColors;
-import com.intellij.openapi.editor.colors.CodeInsightColors;
+import com.intellij.openapi.editor.SyntaxHighlighterColors;
 import com.intellij.openapi.editor.colors.TextAttributesKey;
+import com.intellij.openapi.editor.markup.TextAttributes;
+import com.intellij.ui.SimpleTextAttributes;
 
+import java.awt.Color;
+
 public interface PSQLTextAttributesKeys {
-    TextAttributesKey LINE_COMMENT       = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.LineComment",       DefaultLanguageHighlighterColors.LINE_COMMENT);
-    TextAttributesKey BLOCK_COMMENT      = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.BlockComment",      DefaultLanguageHighlighterColors.BLOCK_COMMENT);
-    TextAttributesKey STRING             = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.String",            DefaultLanguageHighlighterColors.STRING);
-    TextAttributesKey NUMBER             = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Number",            DefaultLanguageHighlighterColors.NUMBER);
-    TextAttributesKey DATA_TYPE          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.DataType",          DefaultLanguageHighlighterColors.CONSTANT);
-    TextAttributesKey ALIAS              = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Alias",             DefaultLanguageHighlighterColors.IDENTIFIER);
-    TextAttributesKey IDENTIFIER         = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Identifier",        DefaultLanguageHighlighterColors.IDENTIFIER);
-    TextAttributesKey QUOTED_IDENTIFIER  = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.QuotedIdentifier",  DefaultLanguageHighlighterColors.IDENTIFIER);
-    TextAttributesKey KEYWORD            = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Keyword",           DefaultLanguageHighlighterColors.KEYWORD);
-    TextAttributesKey FUNCTION           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Function",          DefaultLanguageHighlighterColors.PREDEFINED_SYMBOL);
-    TextAttributesKey PARAMETER          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Parameter",         TemplateColors.TEMPLATE_VARIABLE_ATTRIBUTES);
-    TextAttributesKey EXCEPTION          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Exception",         DefaultLanguageHighlighterColors.KEYWORD);
-    TextAttributesKey OPERATOR           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Operator",          DefaultLanguageHighlighterColors.OPERATION_SIGN);
-    TextAttributesKey PARENTHESIS        = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Parenthesis",       DefaultLanguageHighlighterColors.PARENTHESES);
-    TextAttributesKey BRACKET            = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Brackets",          DefaultLanguageHighlighterColors.BRACKETS);
-    TextAttributesKey UNKNOWN_IDENTIFIER = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.UnknownIdentifier", CodeInsightColors.WRONG_REFERENCES_ATTRIBUTES);
+    TextAttributesKey LINE_COMMENT       = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.LineComment",       SyntaxHighlighterColors.LINE_COMMENT.getDefaultAttributes());
+    TextAttributesKey BLOCK_COMMENT      = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.BlockComment",      SyntaxHighlighterColors.DOC_COMMENT.getDefaultAttributes());
+    TextAttributesKey STRING             = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.String",            SyntaxHighlighterColors.STRING.getDefaultAttributes());
+    TextAttributesKey NUMBER             = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Number",            SyntaxHighlighterColors.NUMBER.getDefaultAttributes());
+    TextAttributesKey DATA_TYPE          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.DataType",          SyntaxHighlighterColors.KEYWORD.getDefaultAttributes());
+    TextAttributesKey ALIAS              = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Alias",             HighlighterColors.TEXT.getDefaultAttributes());
+    TextAttributesKey IDENTIFIER         = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Identifier",        HighlighterColors.TEXT.getDefaultAttributes());
+    TextAttributesKey QUOTED_IDENTIFIER  = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.QuotedIdentifier",  HighlighterColors.TEXT.getDefaultAttributes());
+    TextAttributesKey KEYWORD            = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Keyword",           SyntaxHighlighterColors.KEYWORD.getDefaultAttributes());
+    TextAttributesKey FUNCTION           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Function",          SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES.toTextAttributes());
+    TextAttributesKey PARAMETER          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Parameter",         SyntaxHighlighterColors.KEYWORD.getDefaultAttributes());
+    TextAttributesKey EXCEPTION          = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Exception",         SyntaxHighlighterColors.KEYWORD.getDefaultAttributes());
+    TextAttributesKey OPERATOR           = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Operator",          SyntaxHighlighterColors.OPERATION_SIGN.getDefaultAttributes());
+    TextAttributesKey PARENTHESIS        = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Parenthesis",       SyntaxHighlighterColors.PARENTHS.getDefaultAttributes());
+    TextAttributesKey BRACKET            = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.Brackets",          SyntaxHighlighterColors.BRACKETS.getDefaultAttributes());
+    TextAttributesKey UNKNOWN_IDENTIFIER = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.PSQL.UnknownIdentifier", new TextAttributes(Color.RED, null, null, null, 0));
     TextAttributesKey BAD_CHARACTER      = HighlighterColors.BAD_CHARACTER;
 }
Index: build/build.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- build/build.properties	(revision 765)
+++ build/build.properties	(revision )
@@ -1,4 +1,4 @@
-idea.home= C:/Program Files (x86)/JetBrains/IntelliJ IDEA 13
-idea.version = 13.0
+idea.home= C:/Program Files (x86)/JetBrains/IntelliJ IDEA 11
+idea.version = 11.0
 package.name = DBN-${idea.version}.zip
 idea.plugins.sandbox=
\ No newline at end of file
Index: src/com/dci/intellij/dbn/editor/code/ui/SourceCodeLoadErrorNotificationPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/editor/code/ui/SourceCodeLoadErrorNotificationPanel.java	(revision 765)
+++ src/com/dci/intellij/dbn/editor/code/ui/SourceCodeLoadErrorNotificationPanel.java	(revision )
@@ -1,7 +1,6 @@
 package com.dci.intellij.dbn.editor.code.ui;
 
-import com.intellij.codeInsight.hint.HintUtil;
-import com.intellij.icons.AllIcons;
+import com.dci.intellij.dbn.common.Icons;
 import org.jetbrains.annotations.NotNull;
 
 import javax.swing.BorderFactory;
@@ -13,6 +12,7 @@
 import java.awt.Dimension;
 
 public class SourceCodeLoadErrorNotificationPanel extends JPanel{
+    public static final Color ERROR_COLOR = new Color(255, 220, 220);
     protected final JLabel label = new JLabel();
 
     public SourceCodeLoadErrorNotificationPanel() {
@@ -22,7 +22,7 @@
         setPreferredSize(new Dimension(-1, 24));
 
         add(label, BorderLayout.CENTER);
-        label.setIcon(AllIcons.General.Error);
+        label.setIcon(Icons.EXEC_MESSAGES_ERROR);
     }
 
     public void setText(String text) {
@@ -41,7 +41,7 @@
 
     @Override
     public Color getBackground() {
-        return HintUtil.ERROR_COLOR;
+        return ERROR_COLOR;
     }
 
     @Override
Index: src/com/dci/intellij/dbn/data/editor/color/DataGridTextAttributesKeys.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/data/editor/color/DataGridTextAttributesKeys.java	(revision 765)
+++ src/com/dci/intellij/dbn/data/editor/color/DataGridTextAttributesKeys.java	(revision )
@@ -12,18 +12,6 @@
 import java.awt.Color;
 
 public interface DataGridTextAttributesKeys {
-    TextAttributesKey DEFAULT_PLAIN_DATA     = TextAttributesKey.createTextAttributesKey("DBNavigator.DefaultTextAttributes.DataEditor.PlainData");
-    TextAttributesKey DEFAULT_MODIFIED_DATA  = TextAttributesKey.createTextAttributesKey("DBNavigator.DefaultTextAttributes.DataEditor.ModifiedData");
-    TextAttributesKey DEFAULT_DELETED_DATA   = TextAttributesKey.createTextAttributesKey("DBNavigator.DefaultTextAttributes.DataEditor.DeletedData");
-    TextAttributesKey DEFAULT_ERROR_DATA     = TextAttributesKey.createTextAttributesKey("DBNavigator.DefaultTextAttributes.DataEditor.ErrorData");
-    TextAttributesKey DEFAULT_READONLY_DATA  = TextAttributesKey.createTextAttributesKey("DBNavigator.DefaultTextAttributes.DataEditor.ReadonlyData");
-    TextAttributesKey DEFAULT_LOADING_DATA   = TextAttributesKey.createTextAttributesKey("DBNavigator.DefaultTextAttributes.DataEditor.LoadingData");
-    TextAttributesKey DEFAULT_PRIMARY_KEY    = TextAttributesKey.createTextAttributesKey("DBNavigator.DefaultTextAttributes.DataEditor.PrimaryKey");
-    TextAttributesKey DEFAULT_FOREIGN_KEY    = TextAttributesKey.createTextAttributesKey("DBNavigator.DefaultTextAttributes.DataEditor.ForeignKey");
-    TextAttributesKey DEFAULT_SELECTION      = TextAttributesKey.createTextAttributesKey("DBNavigator.DefaultTextAttributes.DataEditor.Selection");
-
-
-
     Color DEFAULT_SELECTION_FG_COLOR = new Color(255, 255, 255);
     Color DEFAULT_SELECTION_BG_COLOR = new Color(82, 109, 165);
 
@@ -52,13 +40,13 @@
 
     ColorKey CARET_ROW_BACKGROUND = ColorKey.createColorKey("DBNavigator.TextAttributes.DataEditor.CaretRowBackground", Colors.CARET_ROW_BACKGROUND);
 
-    TextAttributesKey PLAIN_DATA     = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.PlainData",    DEFAULT_PLAIN_DATA);
-    TextAttributesKey MODIFIED_DATA  = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.ModifiedData", DEFAULT_MODIFIED_DATA);
-    TextAttributesKey DELETED_DATA   = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.DeletedData",  DEFAULT_DELETED_DATA);
-    TextAttributesKey ERROR_DATA     = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.ErrorData",    DEFAULT_ERROR_DATA);
-    TextAttributesKey READONLY_DATA  = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.ReadonlyData", DEFAULT_READONLY_DATA);
-    TextAttributesKey LOADING_DATA   = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.LoadingData",  DEFAULT_LOADING_DATA);
-    TextAttributesKey PRIMARY_KEY    = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.PrimaryKey",   DEFAULT_PRIMARY_KEY);
-    TextAttributesKey FOREIGN_KEY    = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.ForeignKey",   DEFAULT_FOREIGN_KEY);
-    TextAttributesKey SELECTION      = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.Selection",    DEFAULT_SELECTION);
+    TextAttributesKey PLAIN_DATA     = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.PlainData",    Attributes.DEFAULT);
+    TextAttributesKey MODIFIED_DATA  = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.ModifiedData", new TextAttributes(null, null, null, null, SimpleTextAttributes.STYLE_BOLD));
+    TextAttributesKey DELETED_DATA   = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.DeletedData",  Attributes.DELETED);
+    TextAttributesKey ERROR_DATA     = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.ErrorData",    Attributes.ERROR);
+    TextAttributesKey READONLY_DATA  = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.ReadonlyData", Attributes.READONLY);
+    TextAttributesKey LOADING_DATA   = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.LoadingData",  Attributes.READONLY);
+    TextAttributesKey PRIMARY_KEY    = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.PrimaryKey",   Attributes.PRIMARY_KEY);
+    TextAttributesKey FOREIGN_KEY    = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.ForeignKey",   Attributes.FOREIGN_KEY);
+    TextAttributesKey SELECTION      = TextAttributesKey.createTextAttributesKey("DBNavigator.TextAttributes.DataEditor.Selection",    new TextAttributes(DEFAULT_SELECTION_FG_COLOR, DEFAULT_SELECTION_BG_COLOR, null, null, SimpleTextAttributes.STYLE_PLAIN));
 }
Index: src/com/dci/intellij/dbn/debugger/DatabaseDebuggerManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/debugger/DatabaseDebuggerManager.java	(revision 765)
+++ src/com/dci/intellij/dbn/debugger/DatabaseDebuggerManager.java	(revision )
@@ -120,8 +120,8 @@
         runManager.setSelectedConfiguration(runConfigurationSetting);
         ProgramRunner programRunner = RunnerRegistry.getInstance().findRunnerById(DBProgramRunner.RUNNER_ID);
         try {
-            ExecutionEnvironment executionEnvironment = new ExecutionEnvironment(DefaultDebugExecutor.getDebugExecutorInstance(), programRunner, runConfigurationSetting, getProject());
-            programRunner.execute(executionEnvironment);
+            ExecutionEnvironment executionEnvironment = new ExecutionEnvironment(programRunner, runConfigurationSetting, getProject());
+            programRunner.execute(DefaultDebugExecutor.getDebugExecutorInstance(), executionEnvironment);
         } catch (ExecutionException e) {
             MessageUtil.showErrorDialog(
                     "Could not start debugger for " + method.getQualifiedName() + ". \n" +
\ No newline at end of file
Index: src/com/dci/intellij/dbn/debugger/execution/DBProgramRunConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/debugger/execution/DBProgramRunConfiguration.java	(revision 765)
+++ src/com/dci/intellij/dbn/debugger/execution/DBProgramRunConfiguration.java	(revision )
@@ -11,6 +11,7 @@
 import com.intellij.execution.ExecutionException;
 import com.intellij.execution.Executor;
 import com.intellij.execution.configurations.ConfigurationFactory;
+import com.intellij.execution.configurations.ConfigurationInfoProvider;
 import com.intellij.execution.configurations.LocatableConfiguration;
 import com.intellij.execution.configurations.RunConfiguration;
 import com.intellij.execution.configurations.RunConfigurationBase;
@@ -18,12 +19,16 @@
 import com.intellij.execution.configurations.RuntimeConfigurationError;
 import com.intellij.execution.configurations.RuntimeConfigurationException;
 import com.intellij.execution.runners.ExecutionEnvironment;
+import com.intellij.execution.runners.ProgramRunner;
+import com.intellij.openapi.options.SettingsEditor;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.util.InvalidDataException;
+import com.intellij.openapi.util.JDOMExternalizable;
 import com.intellij.openapi.util.WriteExternalException;
 import gnu.trove.THashSet;
 import org.jdom.Element;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -44,6 +49,18 @@
         if (configurationEditor == null )
             configurationEditor = new DBProgramRunConfigurationEditor(this);
         return configurationEditor;
+    }
+
+    @Nullable
+    @Override
+    public JDOMExternalizable createRunnerSettings(ConfigurationInfoProvider configurationInfoProvider) {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public SettingsEditor<JDOMExternalizable> getRunnerSettingsEditor(ProgramRunner programRunner) {
+        return null;
     }
 
     public boolean isCompileDependencies() {
Index: src/com/dci/intellij/dbn/editor/data/DatasetLoadErrorNotificationProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/editor/data/DatasetLoadErrorNotificationProvider.java	(revision 765)
+++ src/com/dci/intellij/dbn/editor/data/DatasetLoadErrorNotificationProvider.java	(revision )
@@ -1,12 +1,14 @@
 package com.dci.intellij.dbn.editor.data;
 
 import com.dci.intellij.dbn.common.event.EventManager;
+import com.dci.intellij.dbn.common.thread.ConditionalLaterInvocator;
 import com.dci.intellij.dbn.common.util.StringUtil;
 import com.dci.intellij.dbn.editor.data.ui.DatasetLoadErrorNotificationPanel;
 import com.dci.intellij.dbn.object.common.DBSchemaObject;
 import com.dci.intellij.dbn.vfs.DatabaseEditableObjectFile;
 import com.intellij.ide.FrameStateManager;
 import com.intellij.openapi.fileEditor.FileEditor;
+import com.intellij.openapi.fileEditor.FileEditorManager;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.util.Key;
 import com.intellij.openapi.vfs.VirtualFile;
@@ -14,7 +16,7 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-public class DatasetLoadErrorNotificationProvider extends EditorNotifications.Provider<DatasetLoadErrorNotificationPanel> {
+public class DatasetLoadErrorNotificationProvider implements EditorNotifications.Provider<DatasetLoadErrorNotificationPanel> {
     private static final Key<DatasetLoadErrorNotificationPanel> KEY = Key.create("DBNavigator.DatasetLoadErrorNotificationPanel");
     private Project project;
 
@@ -27,12 +29,17 @@
 
     DatasetLoadListener datasetLoadListener = new DatasetLoadListener() {
         @Override
-        public void datasetLoaded(VirtualFile virtualFile) {
+        public void datasetLoaded(final VirtualFile virtualFile) {
             if (!project.isDisposed()) {
+                new ConditionalLaterInvocator() {
+                    @Override
+                    public void run() {
-                EditorNotifications notifications = EditorNotifications.getInstance(project);
-                notifications.updateNotifications(virtualFile);
-            }
+                        EditorNotifications notifications = EditorNotifications.getInstance(project);
+                        notifications.updateNotifications(virtualFile);
+                    }
+                }.start();
-        }
+            }
+        }
     };
 
     @Override
@@ -41,16 +48,19 @@
     }
 
     @Nullable
-    @Override
-    public DatasetLoadErrorNotificationPanel createNotificationPanel(VirtualFile virtualFile, FileEditor fileEditor) {
+    public DatasetLoadErrorNotificationPanel createNotificationPanel(VirtualFile virtualFile) {
         if (virtualFile instanceof DatabaseEditableObjectFile) {
-            if (fileEditor instanceof DatasetEditor) {
-                DatabaseEditableObjectFile editableObjectFile = (DatabaseEditableObjectFile) virtualFile;
+            DatabaseEditableObjectFile editableObjectFile = (DatabaseEditableObjectFile) virtualFile;
+            FileEditorManager editorManager = FileEditorManager.getInstance(editableObjectFile.getProject());
+            FileEditor[] fileEditors = editorManager.getEditors(virtualFile);
+            for (FileEditor fileEditor : fileEditors) {
+                if (fileEditor instanceof DatasetEditor) {
-                DBSchemaObject editableObject = editableObjectFile.getObject();
-                DatasetEditor datasetEditor = (DatasetEditor) fileEditor;
-                String sourceLoadError = datasetEditor.getDataLoadError();
-                if (StringUtil.isNotEmpty(sourceLoadError)) {
-                    return createPanel(editableObject, sourceLoadError);
+                    DBSchemaObject editableObject = editableObjectFile.getObject();
+                    DatasetEditor datasetEditor = (DatasetEditor) fileEditor;
+                    String sourceLoadError = datasetEditor.getDataLoadError();
+                    if (StringUtil.isNotEmpty(sourceLoadError)) {
+                        return createPanel(editableObject, sourceLoadError);
+                    }
                 }
 
             }
Index: src/com/dci/intellij/dbn/language/sql/structure/SQLStructureViewBuilderFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/language/sql/structure/SQLStructureViewBuilderFactory.java	(revision 765)
+++ src/com/dci/intellij/dbn/language/sql/structure/SQLStructureViewBuilderFactory.java	(revision )
@@ -8,7 +8,6 @@
 import com.intellij.lang.PsiStructureViewFactory;
 import com.intellij.openapi.editor.Editor;
 import com.intellij.psi.PsiFile;
-import com.intellij.psi.util.PsiEditorUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -22,14 +21,13 @@
             }
 
             @NotNull
-            @Override
             public StructureViewModel createStructureViewModel(@Nullable Editor editor) {
                 PsiFile psiFile = DocumentUtil.getFile(editor);
                 return psiFile == null || isDisposed() ? EmptyStructureViewModel.INSTANCE : new SQLStructureViewModel(psiFile);
             }
 
             private boolean isDisposed() {
-                return PsiEditorUtil.Service.getInstance() == null;
+                return false;
             }
         };
     }
Index: src/com/dci/intellij/dbn/ddl/ui/DDLMappedNotificationPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/ddl/ui/DDLMappedNotificationPanel.java	(revision 765)
+++ src/com/dci/intellij/dbn/ddl/ui/DDLMappedNotificationPanel.java	(revision )
@@ -10,7 +10,6 @@
 import com.intellij.openapi.editor.colors.EditorColorsManager;
 import com.intellij.ui.HyperlinkAdapter;
 import com.intellij.ui.HyperlinkLabel;
-import com.intellij.util.ui.PlatformColors;
 import com.intellij.util.ui.UIUtil;
 import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.NotNull;
@@ -73,7 +72,7 @@
     }
 
     public HyperlinkLabel createActionLabel(final String text, final Runnable action) {
-        HyperlinkLabel label = new HyperlinkLabel(text, PlatformColors.BLUE, getBackground(), PlatformColors.BLUE);
+        HyperlinkLabel label = new HyperlinkLabel(text, Color.BLUE, getBackground(), Color.BLUE);
         label.addHyperlinkListener(new HyperlinkAdapter() {
             @Override
             protected void hyperlinkActivated(HyperlinkEvent e) {
Index: src/com/dci/intellij/dbn/ddl/DDLFileAttachmentManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/ddl/DDLFileAttachmentManager.java	(revision 765)
+++ src/com/dci/intellij/dbn/ddl/DDLFileAttachmentManager.java	(revision )
@@ -249,7 +249,7 @@
                 descriptor.addRoot(contentRoot);
             }*/
 
-            VirtualFile[] selectedDirectories = FileChooser.chooseFiles(descriptor, project, null);
+            VirtualFile[] selectedDirectories = FileChooser.chooseFiles(project, descriptor);
             if (selectedDirectories.length > 0) {
                 final String fileName = fileNameProvider.getFileName();
                 final VirtualFile parentDirectory = selectedDirectories[0];
Index: src/com/dci/intellij/dbn/debugger/execution/DBProgramRunner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/dci/intellij/dbn/debugger/execution/DBProgramRunner.java	(revision 765)
+++ src/com/dci/intellij/dbn/debugger/execution/DBProgramRunner.java	(revision )
@@ -31,7 +31,6 @@
 import com.intellij.xdebugger.XDebugSession;
 import com.intellij.xdebugger.XDebuggerManager;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 import java.util.List;
 
@@ -51,11 +50,7 @@
         return false;
     }
 
-    @Nullable
-    protected RunContentDescriptor doExecute(Project project, RunProfileState state, RunContentDescriptor contentToReuse, ExecutionEnvironment env) throws ExecutionException {
-        return doExecute(project, env.getExecutor(), state, contentToReuse, env);
-    }
-
+    @Override
     protected RunContentDescriptor doExecute(
             Project project,
             final Executor executor,
@@ -266,6 +261,5 @@
             }
         }.start();
     }
-
 }
 
