Index: src/com/dci/intellij/dbn/editor/code/SourceCodeEditorManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/editor/code/SourceCodeEditorManager.java	(revision 2151)
+++ src/com/dci/intellij/dbn/editor/code/SourceCodeEditorManager.java	(revision )
@@ -195,8 +195,7 @@
                         virtualFile.getLastSavedContent(),
                         virtualFile,
                         virtualFile.getProject(),
-                        ActionButtonPresentation.APPLY,
-                        ActionButtonPresentation.CANCEL_WITH_PROMPT);
+                        ActionButtonPresentation.createApplyButton());
                 mergeRequest.setVersionTitles(new String[]{"Database version", "Merge result", "Your version"});
                 final DBSchemaObject object = virtualFile.getObject();
                 mergeRequest.setWindowTitle("Version conflict resolution for " + object.getQualifiedNameWithType());
Index: src/META-INF/plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/META-INF/plugin.xml	(revision 2151)
+++ src/META-INF/plugin.xml	(revision )
@@ -5,7 +5,7 @@
     <category>Database</category>
     <depends>com.intellij.modules.lang</depends>
     <vendor email="dancioca@bluewin.ch" logo="/img/DatabaseNavigator.png">Dan Cioca</vendor>
-    <idea-version since-build="97.0001" until-build="107.9999"/>
+    <idea-version since-build="93.0001" until-build="95.9999"/>
     <description><![CDATA[
             </b>
             <b>Database development, scripting and navigation tool</b><br>
Index: src/com/dci/intellij/dbn/code/common/style/formatting/FormattingBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/code/common/style/formatting/FormattingBlock.java	(revision 2151)
+++ src/com/dci/intellij/dbn/code/common/style/formatting/FormattingBlock.java	(revision )
@@ -59,7 +59,7 @@
             BasePsiElement basePsiElement = (BasePsiElement) psiElement;
 
             ElementType elementType  = basePsiElement.getElementType();
-            if (elementType.is(ElementTypeAttribute.STATEMENT)) return Indent.getNormalIndent(true);
+            if (elementType.is(ElementTypeAttribute.STATEMENT)) return Indent.getNormalIndent();
         }
         return Indent.getNoneIndent();
     }
Index: src/com/intellij/ui/components/JBList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/intellij/ui/components/JBList.java	(revision )
+++ src/com/intellij/ui/components/JBList.java	(revision )
@@ -0,0 +1,158 @@
+/*
+ * Copyright 2000-2010 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.intellij.ui.components;
+
+import com.intellij.openapi.util.Disposer;
+import com.intellij.util.ArrayUtil;
+import com.intellij.util.NotNullFunction;
+import com.intellij.util.ui.AsyncProcessIcon;
+import com.intellij.util.ui.UIUtil;
+import org.jetbrains.annotations.NotNull;
+
+import javax.swing.*;
+import java.awt.*;
+import java.util.Collection;
+
+/**
+ * @author Anton Makeev
+ * @author Konstantin Bulenkov
+ */
+public class JBList extends JList{
+
+  private AsyncProcessIcon myBusyIcon;
+  private boolean myBusy;
+
+
+  public JBList() {
+    init();
+  }
+
+  public JBList(ListModel dataModel) {
+    super(dataModel);
+    init();
+  }
+
+  public JBList(Object... listData) {
+    super(createDefaultListModel(listData));
+    init();
+  }
+
+  public static DefaultListModel createDefaultListModel(Object... items) {
+    final DefaultListModel model = new DefaultListModel();
+    for (Object item : items) {
+      model.add(model.getSize(), item);
+    }
+    return model;
+  }
+
+  public JBList(Collection items) {
+    this(ArrayUtil.toObjectArray(items));
+  }
+
+  @Override
+  public void removeNotify() {
+    super.removeNotify();
+
+    if (myBusyIcon != null) {
+      remove(myBusyIcon);
+      Disposer.dispose(myBusyIcon);
+      myBusyIcon = null;
+    }
+  }
+
+  @Override
+  public void doLayout() {
+    super.doLayout();
+  }
+
+  @Override
+  public void paint(Graphics g) {
+    super.paint(g);
+  }
+
+  public void setPaintBusy(boolean paintBusy) {
+    if (myBusy == paintBusy) return;
+
+    myBusy = paintBusy;
+    updateBusy();
+  }
+
+  private void updateBusy() {
+    if (myBusy) {
+      if (myBusyIcon == null) {
+        myBusyIcon = new AsyncProcessIcon(toString()).setUseMask(false);
+        myBusyIcon.setOpaque(false);
+        myBusyIcon.setPaintPassiveIcon(false);
+        add(myBusyIcon);
+      }
+    }
+
+    if (myBusyIcon != null) {
+      if (myBusy) {
+        myBusyIcon.resume();
+      }
+      else {
+        myBusyIcon.suspend();
+        //noinspection SSBasedInspection
+        SwingUtilities.invokeLater(new Runnable() {
+          public void run() {
+            if (myBusyIcon != null) {
+              repaint();
+            }
+          }
+        });
+      }
+    }
+  }
+
+  @Override
+  protected void paintComponent(Graphics g) {
+    super.paintComponent(g);
+  }
+
+  private void init() {
+    setSelectionBackground(UIUtil.getListSelectionBackground());
+    setSelectionForeground(UIUtil.getListSelectionForeground());
+  }
+
+  public boolean isEmpty() {
+    return getItemsCount() == 0;
+  }
+
+  public int getItemsCount() {
+    ListModel model = getModel();
+    return model == null ? 0 : model.getSize();
+  }
+
+  public <T> void installCellRenderer(final @NotNull NotNullFunction<T, JComponent> fun) {
+    setCellRenderer(new DefaultListCellRenderer() {
+      @Override
+      public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
+        @SuppressWarnings({"unchecked"})
+        final JComponent comp = fun.fun((T)value);  
+        comp.setOpaque(true);
+        if (isSelected) {
+          comp.setBackground(list.getSelectionBackground());
+          comp.setForeground(list.getSelectionForeground());
+        } else {
+          comp.setBackground(list.getBackground());
+          comp.setForeground(list.getForeground());
+        }
+        return comp;
+      }
+    });
+  }
+}
Index: src/com/intellij/util/ui/ColorIcon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/intellij/util/ui/ColorIcon.java	(revision )
+++ src/com/intellij/util/ui/ColorIcon.java	(revision )
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2000-2010 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.intellij.util.ui;
+
+import org.jetbrains.annotations.NotNull;
+
+import java.awt.*;
+
+/**
+ * @author Konstantin Bulenkov
+ */
+public class ColorIcon extends EmptyIcon {
+  private final Color myColor;
+
+  public ColorIcon(int size, @NotNull Color color) {
+    super(size, size);
+    myColor = color;
+  }
+
+  public Color getIconColor() {
+    return myColor;
+  }
+
+  @Override
+  public void paintIcon(final Component component, final Graphics g, final int i, final int j) {
+    final int iconWidth = getIconWidth();
+    final int iconHeight = getIconHeight();
+    g.setColor(getIconColor());
+    g.fillRect(i, j, iconWidth, iconHeight);
+  }
+}
Index: src/com/dci/intellij/dbn/debugger/execution/DBProgramRunner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/debugger/execution/DBProgramRunner.java	(revision 2151)
+++ src/com/dci/intellij/dbn/debugger/execution/DBProgramRunner.java	(revision )
@@ -24,6 +24,7 @@
 import com.intellij.execution.runners.GenericProgramRunner;
 import com.intellij.execution.ui.RunContentDescriptor;
 import com.intellij.history.LocalHistory;
+import com.intellij.history.LocalHistoryConfiguration;
 import com.intellij.openapi.actionSystem.DataContext;
 import com.intellij.openapi.progress.ProgressIndicator;
 import com.intellij.openapi.project.Project;
@@ -239,29 +240,24 @@
                     DataContext dataContext = environment.getDataContext();
                     RunContentDescriptor reuseContent = ExecutionManager.getInstance(project).getContentManager().getReuseContent(executor, dataContext);
                     DBProgramDebugProcessStarter debugProcessStarter = new DBProgramDebugProcessStarter(connectionHandler);
-                    XDebugSession session = null;
-                    try {
-                        session = XDebuggerManager.getInstance(project).startSession(
+                    XDebugSession session = XDebuggerManager.getInstance(project).startSession(
-                                DBProgramRunner.this,
-                                environment,
-                                reuseContent,
-                                debugProcessStarter);
+                            DBProgramRunner.this,
+                            environment,
+                            reuseContent,
+                            debugProcessStarter);
 
-                        RunContentDescriptor descriptor = session.getRunContentDescriptor();
+                    RunContentDescriptor descriptor = session.getRunContentDescriptor();
 
-                        if (callback != null) callback.processStarted(descriptor);
+                    if (callback != null) callback.processStarted(descriptor);
 
-                        if (true /*LocalHistoryConfiguration.getInstance().ADD_LABEL_ON_RUNNING*/) {
+                    if (LocalHistoryConfiguration.getInstance().ADD_LABEL_ON_RUNNING) {
-                            RunProfile runProfile = environment.getRunProfile();
+                        RunProfile runProfile = environment.getRunProfile();
-                            LocalHistory.getInstance().putSystemLabel(project, executor.getId() + " " + runProfile.getName());
+                        LocalHistory.putSystemLabel(project, executor.getId() + " " + runProfile.getName());
-                        }
+                    }
 
-                        ExecutionManager.getInstance(project).getContentManager().showRunContent(executor, descriptor);
-                        ProcessHandler processHandler = descriptor.getProcessHandler();
-                        if (processHandler != null) processHandler.startNotify();
+                    ExecutionManager.getInstance(project).getContentManager().showRunContent(executor, descriptor);
+                    ProcessHandler processHandler = descriptor.getProcessHandler();
+                    if (processHandler != null) processHandler.startNotify();
-                    } catch (ExecutionException e) {
-                        e.printStackTrace();
-                    }
                 }
             }
         }.start();
Index: src/com/dci/intellij/dbn/common/environment/EnvironmentManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/common/environment/EnvironmentManager.java	(revision 2151)
+++ src/com/dci/intellij/dbn/common/environment/EnvironmentManager.java	(revision )
@@ -17,8 +17,6 @@
 import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Set;
-
 public class EnvironmentManager extends AbstractProjectComponent implements JDOMExternalizable, Disposable, EnvironmentChangeListener {
     private EnvironmentManager(Project project) {
         super(project);
@@ -40,13 +38,11 @@
     public void environmentTypeChanged(EnvironmentType environmentType) {
         FileEditorManagerImpl fileEditorManager = (FileEditorManagerImpl) FileEditorManager.getInstance(getProject());
         VirtualFile[] openFiles = fileEditorManager.getOpenFiles();
-        Set<EditorsSplitters> splitters = fileEditorManager.getAllSplitters();
+        EditorsSplitters splitters = fileEditorManager.getSplitters();
         for (VirtualFile virtualFile : openFiles) {
             ConnectionHandler connectionHandler = DBEditorTabColorProvider.getConnectionHandler(virtualFile);
             if (connectionHandler != null && connectionHandler.getEnvironmentType().equals(environmentType)) {
-                for (EditorsSplitters splitter : splitters) {
-                    splitter.updateFileBackgroundColor(virtualFile);
-                }
+                splitters.updateFileBackgroundColor(virtualFile);
             }
         }
     }
Index: src/com/dci/intellij/dbn/data/find/action/ToggleRegex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/data/find/action/ToggleRegex.java	(revision 2151)
+++ src/com/dci/intellij/dbn/data/find/action/ToggleRegex.java	(revision )
@@ -17,7 +17,6 @@
 
 import com.dci.intellij.dbn.data.find.DataSearchComponent;
 import com.intellij.find.FindModel;
-import com.intellij.find.FindSettings;
 import com.intellij.openapi.actionSystem.AnActionEvent;
 
 public class ToggleRegex extends DataSearchHeaderToggleAction {
@@ -43,6 +42,6 @@
         if (state) {
             findModel.setWholeWordsOnly(false);
         }
-        FindSettings.getInstance().setLocalRegularExpressions(state);
+        //FindSettings.getInstance().setLocalRegularExpressions(state);
     }
 }
Index: src/com/dci/intellij/dbn/data/find/DataFindModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/data/find/DataFindModel.java	(revision 2151)
+++ src/com/dci/intellij/dbn/data/find/DataFindModel.java	(revision )
@@ -1,7 +1,72 @@
 package com.dci.intellij.dbn.data.find;
 
+import com.dci.intellij.dbn.common.util.StringUtil;
 import com.intellij.find.FindModel;
+import org.jetbrains.annotations.NotNull;
 
+import java.util.concurrent.CopyOnWriteArrayList;
+
 public class DataFindModel extends FindModel{
+    private boolean emptyString = true;
+
+    private final CopyOnWriteArrayList<FindModelObserver> observers = new CopyOnWriteArrayList<FindModelObserver>();
+
+    public interface FindModelObserver {
+        void findModelChanged(FindModel findModel);
+    }
+
+    public void addObserver(FindModelObserver observer) {
+        observers.add(observer);
+    }
+
+    public void removeObserver(FindModelObserver observer) {
+        observers.remove(observer);
+    }
+
+    private void notifyObservers() {
+        for (FindModelObserver observer : observers) {
+            observer.findModelChanged(this);
+        }
+    }
+
+    public void setStringToFind(@NotNull String s) {
+        boolean changed = !StringUtil.equals(s, getStringToFind());
+        emptyString = StringUtil.isEmpty(s);
+        if (!emptyString) super.setStringToFind(s);
+
+        if (changed) {
+            notifyObservers();
+        }
+    }
+
+    @NotNull
+    @Override
+    public String getStringToFind() {
+        return emptyString ? "" : super.getStringToFind();
+    }
+
+    public void setCaseSensitive(boolean caseSensitive) {
+        boolean changed = isCaseSensitive() != caseSensitive;
+        super.setCaseSensitive(caseSensitive);
+        if (changed) {
+            notifyObservers();
+        }
+    }
+
+    public void setRegularExpressions(boolean regularExpressions) {
+        boolean changed = regularExpressions != isRegularExpressions();
+        super.setRegularExpressions(regularExpressions);
+        if (changed) {
+            notifyObservers();
+        }
+    }
+
+    public void setWholeWordsOnly(boolean wholeWordsOnly) {
+        boolean changed = wholeWordsOnly != isWholeWordsOnly();
+        super.setWholeWordsOnly(wholeWordsOnly);
+        if (changed) {
+            notifyObservers();
+        }
+    }
 
 }
Index: src/com/intellij/lang/FileASTNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/intellij/lang/FileASTNode.java	(revision )
+++ src/com/intellij/lang/FileASTNode.java	(revision )
@@ -0,0 +1,4 @@
+package com.intellij.lang;
+
+public interface FileASTNode extends ASTNode{
+}
Index: src/com/dci/intellij/dbn/common/util/ActionUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/common/util/ActionUtil.java	(revision 2151)
+++ src/com/dci/intellij/dbn/common/util/ActionUtil.java	(revision )
@@ -52,7 +52,7 @@
     }
     
     public static void registerDataProvider(JComponent component, DataProvider dataProvider, boolean recursive) {
-        DataManager.registerDataProvider(component, dataProvider);
+        component.putClientProperty("DataProvider", dataProvider);
         if (recursive) {
             for (Component child : component.getComponents()) {
                 if (child instanceof JComponent) {
@@ -65,7 +65,7 @@
     
     public static DataProvider getDataProvider(JComponent component) {
         if (component != null) {
-            DataProvider dataProvider = DataManager.getDataProvider(component);
+            DataProvider dataProvider = (DataProvider) component.getClientProperty("DataProvider");
             if (dataProvider == null) {
                 JComponent parent = (JComponent) component.getParent();
                 return getDataProvider(parent);
Index: src/com/intellij/ui/components/JBScrollPane.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/intellij/ui/components/JBScrollPane.java	(revision )
+++ src/com/intellij/ui/components/JBScrollPane.java	(revision )
@@ -0,0 +1,21 @@
+package com.intellij.ui.components;
+
+import javax.swing.*;
+import java.awt.*;
+
+public class JBScrollPane extends JScrollPane {
+    public JBScrollPane(Component view, int vsbPolicy, int hsbPolicy) {
+        super(view, vsbPolicy, hsbPolicy);
+    }
+
+    public JBScrollPane(Component view) {
+        super(view);
+    }
+
+    public JBScrollPane(int vsbPolicy, int hsbPolicy) {
+        super(vsbPolicy, hsbPolicy);
+    }
+
+    public JBScrollPane() {
+    }
+}
Index: src/com/dci/intellij/dbn/common/ui/KeyUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/common/ui/KeyUtil.java	(revision 2151)
+++ src/com/dci/intellij/dbn/common/ui/KeyUtil.java	(revision )
@@ -6,7 +6,6 @@
 import com.intellij.openapi.actionSystem.ShortcutSet;
 import com.intellij.openapi.keymap.Keymap;
 import com.intellij.openapi.keymap.KeymapManager;
-import com.intellij.openapi.keymap.KeymapUtil;
 import org.jetbrains.annotations.Nullable;
 
 import javax.swing.*;
@@ -38,10 +37,15 @@
     }
 
     public static boolean isEmacsKeymap() {
-        return KeymapUtil.isEmacsKeymap();
+        return isEmacsKeymap(KeymapManager.getInstance().getActiveKeymap());
     }
 
     public static boolean isEmacsKeymap(@Nullable Keymap keymap) {
-        return KeymapUtil.isEmacsKeymap(keymap);
+        for (; keymap != null; keymap = keymap.getParent()) {
+            if ("Emacs".equalsIgnoreCase(keymap.getName())) {
+                return true;
+            }
+        }
+        return false;
     }
 }
Index: src/com/dci/intellij/dbn/vfs/DatabaseFileViewProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/vfs/DatabaseFileViewProvider.java	(revision 2151)
+++ src/com/dci/intellij/dbn/vfs/DatabaseFileViewProvider.java	(revision )
@@ -8,6 +8,7 @@
 import com.intellij.psi.PsiFile;
 import com.intellij.psi.PsiManager;
 import com.intellij.psi.SingleRootFileViewProvider;
+import com.intellij.testFramework.LightVirtualFile;
 import org.jetbrains.annotations.NotNull;
 
 public class DatabaseFileViewProvider extends SingleRootFileViewProvider {
@@ -49,7 +50,7 @@
 
     @NotNull
     @Override
-    public SingleRootFileViewProvider createCopy(VirtualFile copy) {
+    public SingleRootFileViewProvider createCopy(LightVirtualFile copy) {
         return new DatabaseFileViewProvider(getManager(), copy, false, getBaseLanguage());
     }
 
Index: src/com/intellij/ui/ColoredSideBorder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/intellij/ui/ColoredSideBorder.java	(revision )
+++ src/com/intellij/ui/ColoredSideBorder.java	(revision )
@@ -0,0 +1,80 @@
+/*
+ * Copyright 2000-2010 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.intellij.ui;
+
+import com.intellij.util.ui.UIUtil;
+
+import javax.swing.border.Border;
+import java.awt.*;
+
+public class ColoredSideBorder implements Border {
+  private final Color myLeftColor;
+  private final Color myRightColor;
+  private final Color myTopColor;
+  private final Color myBottomColor;
+  
+  private final int myThickness;
+
+  public ColoredSideBorder(Color topColor, Color leftColor, Color bottomColor, Color rightColor, int thickness) {
+    myTopColor = topColor;
+    myLeftColor = leftColor;
+    myRightColor = rightColor;
+    myBottomColor = bottomColor;
+    myThickness = thickness;
+  }
+
+  public Insets getBorderInsets(Component component) {
+    return new Insets(
+      myTopColor != null ? getThickness() : 0,
+      myLeftColor != null ? getThickness() : 0,
+      myBottomColor != null ? getThickness() : 0,
+      myRightColor != null ? getThickness() : 0
+    );
+  }
+
+  public boolean isBorderOpaque() {
+    return true;
+  }
+
+  public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
+    Color oldColor = g.getColor();
+    int i;
+
+    for(i = 0; i < getThickness(); i++){
+      if (myLeftColor != null){
+        g.setColor(myLeftColor);
+        UIUtil.drawLine(g, x + i, y + i, x + i, height - i - i - 1);
+      }
+      if (myTopColor != null){
+        g.setColor(myTopColor);
+        UIUtil.drawLine(g, x + i, y + i, width - i - i - 1, y + i);
+      }
+      if (myRightColor != null){
+        g.setColor(myRightColor);
+        UIUtil.drawLine(g, width - i - i - 1, y + i, width - i - i - 1, height - i - i - 1);
+      }
+      if (myBottomColor != null){
+        g.setColor(myBottomColor);
+        UIUtil.drawLine(g, x + i, height - i - i - 1, width - i - i - 1, height - i - i - 1);
+      }
+    }
+    g.setColor(oldColor);
+  }
+
+  public int getThickness() {
+    return myThickness;
+  }
+}
Index: src/com/dci/intellij/dbn/common/compatibility/CompatibilityUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/common/compatibility/CompatibilityUtil.java	(revision 2151)
+++ src/com/dci/intellij/dbn/common/compatibility/CompatibilityUtil.java	(revision )
@@ -1,53 +1,77 @@
 package com.dci.intellij.dbn.common.compatibility;
 
 import com.dci.intellij.dbn.vfs.SourceCodeFile;
-import com.intellij.find.editorHeaderActions.Utils;
 import com.intellij.openapi.editor.Document;
 import com.intellij.openapi.editor.ex.EditorEx;
 import com.intellij.openapi.editor.impl.DocumentImpl;
 import com.intellij.openapi.module.Module;
 import com.intellij.openapi.module.ModuleType;
+import com.intellij.openapi.ui.popup.JBPopup;
+import com.intellij.openapi.ui.popup.JBPopupFactory;
+import com.intellij.openapi.ui.popup.PopupChooserBuilder;
 import com.intellij.openapi.vfs.VirtualFile;
 import com.intellij.testFramework.LightVirtualFile;
 import com.intellij.ui.components.JBList;
-import com.intellij.util.ui.UIUtil;
 
 import javax.swing.*;
 import java.awt.*;
 
 public class CompatibilityUtil {
     public static Color getEditorBackgroundColor(EditorEx editorEx) {
-        return editorEx.getBackgroundColor();
+        return editorEx.getBackroundColor();
     }
 
     public static ModuleType getModuleType(Module module) {
         return module.getModuleType();
         //return ModuleType.get(module);
     }
-    
+
     public static void stripDocumentTrailingSpaces(Document document) {
         if (document instanceof DocumentImpl) {
             DocumentImpl documentImpl = (DocumentImpl) document;
             documentImpl.stripTrailingSpaces(true);
             //documentImpl.stripTrailingSpaces();
         }
-        
+
     }
 
-    public static void showSearchCompletionPopup(boolean byClickingToolbarButton, JComponent toolbarComponent, JBList list, String title, JTextField textField) {
-        Utils.showCompletionPopup(byClickingToolbarButton ? toolbarComponent : null, list, title, textField);
+    public static void showSearchCompletionPopup(boolean byClickingToolbarButton, JComponent toolbarComponent, final JBList list, String title, final JTextField textField) {
+        final Runnable callback = new Runnable() {
+            public void run() {
+                String selectedValue = (String)list.getSelectedValue();
+                if (selectedValue != null) {
+                    textField.setText(selectedValue);
-    }
+                }
+            }
+        };
 
+        final PopupChooserBuilder builder = JBPopupFactory.getInstance().createListPopupBuilder(list);
+        if (title != null) {
+            builder.setTitle(title);
+        }
+
+        final JBPopup popup = builder.setMovable(false).setResizable(false)
+                .setRequestFocus(true).setItemChoosenCallback(callback).createPopup();
+
+        if (byClickingToolbarButton) {
+            popup.showUnderneathOf(toolbarComponent);
+        }
+        else {
+            popup.showUnderneathOf(textField);
+        }
+    }
+
     public static void setSmallerFontForChildren(JComponent component) {
-        Utils.setSmallerFontForChildren(component);
+        //Utils.setSmallerFontForChildren(component);
     }
 
     public static void setSmallerFont(JComponent component) {
-        Utils.setSmallerFont(component);
+        //Utils.setSmallerFont(component);
     }
 
     public static boolean isUnderGTKLookAndFeel() {
-        return UIUtil.isUnderGTKLookAndFeel();
+        //return UIUtil.isUnderGTKLookAndFeel();
+        return false;
     }
 
     public static String getParseRootId(VirtualFile virtualFile) {
@@ -56,8 +80,8 @@
             return sourceCodeFile.getParseRootId();
         } else if (virtualFile instanceof LightVirtualFile) {
             LightVirtualFile lightVirtualFile = (LightVirtualFile) virtualFile;
-            VirtualFile originalFile = lightVirtualFile.getOriginalFile();
-            return getParseRootId(originalFile);
+            //VirtualFile originalFile = lightVirtualFile.getOriginalFile();
+            //return getParseRootId(originalFile);
         }
         return null;
     }
Index: src/com/dci/intellij/dbn/common/ui/DBNCheckboxAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/com/dci/intellij/dbn/common/ui/DBNCheckboxAction.java	(revision 2151)
+++ src/com/dci/intellij/dbn/common/ui/DBNCheckboxAction.java	(revision )
@@ -1,10 +1,13 @@
 package com.dci.intellij.dbn.common.ui;
 
+import com.intellij.openapi.actionSystem.Presentation;
 import com.intellij.openapi.actionSystem.ex.CheckboxAction;
 
 import javax.swing.*;
 
 public abstract class DBNCheckboxAction extends CheckboxAction{
+    private JComponent checkBox;
+
     protected DBNCheckboxAction() {
     }
 
@@ -14,5 +17,15 @@
 
     protected DBNCheckboxAction(String text, String description, Icon icon) {
         super(text, description, icon);
+    }
+
+    @Override
+    public JComponent createCustomComponent(Presentation presentation) {
+        checkBox = super.createCustomComponent(presentation);
+        return checkBox;
+    }
+
+    protected JComponent getCheckBox() {
+        return checkBox;
     }
 }
Index: build/build.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- build/build.properties	(revision 2151)
+++ build/build.properties	(revision )
@@ -1,4 +1,4 @@
 package.name = DBN-9.0.zip
 idea.version = 9.0
-idea.home= C:/Program Files/JetBrains/IntelliJ IDEA ${idea.version}
-idea.plugins.sandbox=T:/IntelliJIdea/${idea.version}/system/plugins-sandbox${idea.version}/plugins
\ No newline at end of file
+idea.home= C:/Program Files (x86)/JetBrains/IntelliJ IDEA 9
+idea.plugins.sandbox=D:/IntelliJIdea/${idea.version}/system/plugins-sandbox${idea.version}/plugins
\ No newline at end of file
